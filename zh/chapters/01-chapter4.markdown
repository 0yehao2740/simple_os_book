# 物理内存管理 #

编程人员希望拥有容量无限大、速度无限快，而且是非易失型的（nonvolatile）的内存空间，到lab1为止，这个梦想还无法轻易满足。为此绝大多数的计算机采用了一种折衷的方法，即建立一个分层的存储器结构，最高层是CPU内部的一些寄存器，它们的访问速度是最快的，但容量不是很大，一般小于1KB；第二层是高速缓存（即硬件cache），实现在CPU内部，接近寄存器速度，容量一般小于4MB；第三层是主存储器（内存），其访问速度比寄存器小一个数量级、价格便宜，目前几百块人民币就可以买到4GB。以上这三种存储器都是易失型的，即在断电后，其内容全部会丢失掉。第四层是磁盘，它的访问速度较慢、价格较便宜，目前花几百块钱就可以买到存储容量>1TB的硬盘，而且是非易失型的。
操作系统需要尽量满足编程人员的梦想，为此它需要管理上述存储器层次结构形成的存储空间，并完成如下主要任务：

 * 记录存储空间的使用情况，即记录哪些部分正在被使用，哪些部分还空闲；
 * 当需求方需要存储空间时，能快速地分配给它合适大小的空间；在需求方显式表示不需要申请到的存储空间时，能把存储空间回收，便于以后的分配；
 * 隔离不同的内存区域，确保在限制在一个内存区域中运行的软件无法访问区域以外的内存空间。这种机制称为地址保护（地址隔离）机制。

本章内容主要涉及操作系统的物理内存管理。读者通过阅读本章的内容并动手实践相关的5个project实验：

 * proj5：能够探测物理内存并建立页表，实现分页管理
 * proj5.1/5.1.1/5.1.2：实现基于连续物理页的first/best/worst-fit分配算法
 * proj5.2：实现基于连续物理页的buddy分配算法
 * proj6：实现任意大小内存分配的slab分配算法


可以掌握如下知识：

 * 与操作系统原理相关
     * 基于分页机制的内存管理
     * 连续内存分配算法

 * 操作系统原理之外
     * 80386对分页管理（页表等）的硬件支持