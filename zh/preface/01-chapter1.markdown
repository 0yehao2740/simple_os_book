# 前言 #

对于在校的学生和已经参加工作的工程师而言，能否以较小的时间和精力比较全面地了解操作系统呢？陆游老夫子说过“纸上得来终觉浅，绝知此事要躬行”，也许在了解基本的操作系统概念和原理基础上，通过实际动手来一步一步分析、设计和实现一个微型化的操作系统，会发现操作系统原来如此，概念原理和实际实现之间有紧密的联系和巨大的差异。
一方面现在的操作系统课本越来越庞大和抽象，反而忽视了实践。

其实，操作系统的设计实现是在没有教科书的情况下完成的。换句话说，现有操作系统的实现，再有操作系统的课本。而另一方面实际的操作系统相当庞大，如Linux、Windows等，都是上百万行的源代码规模，实现这些软件的目的是给人用的，不是给人学的。能否在这两方面找到一个平衡？早期的UNIX操作系统和MIT的Frans Kaashoek教授等基于UNIX v6设计的xv6操作系统给了我们启发：对一个计算机专业的本科生而言，设计实现一个操作系统有挑战但是可行！本书想进行这样的教学尝试，以设计实现一个微型但全面的“麻雀”操作系统—ucore为基本目标，以增量式地完成各种基于ucore操作系统的实验为实践过程，以在此过程中逐步介绍的操作系统的基本概念和原理为实践指导，做到有“理”可循和有“码”可查，最终让读者了解和掌握操作系统的原理、设计与实现。

### 背景 ###

写一个教学OS的初衷是陈渝老师和向勇老师想参考MIT的xv6/JOS开发一个能够与OS课程教材向配套的OS实验环境。没有直接采用xv6/JOS的原因是xv6没有完整的保护模式页机制和虚存管理机制，JOS不是传统的UNIX 单体内核架构，而是Exokerne内核架构，与当前OS教学的知识点有点远，在互联网上找了一圈，没有合适的。有人说为何不用Linux？其实Linux确实挺好的，只是对于首次学习OS原理的本科生要在短短一学期内搞懂Linux的部分实现细节，可能付出的代价会比较大，需要冒着挂掉其他课的风险。为此陈渝老师鼓励他带的硕士研究生王乃铮试试能否仿照xv6和linux自己鼓捣一个教学用的小OS，并用Ken Thompson和Linus在短短2~3个月分别开发了UNIX和Linux的故事来从精神上激励他。王乃铮同学看了xv6的代码，本着试试看的想法，就开始coding，并查看各种相关文档和资料，发现也只花了短短1个不到的时间就完成了支持lab1实验的ucore OS；为此信心大增，以月为单位又接连完成了支持lab2~lab8的ucore OS，前后大约花了8个月（这8个月还顺便完成了减轻体重和找女朋友的重要工作）。做完此事后，王乃铮同学离毕业只有3个时间了。有了之前OS开发的底子，他在3个月的时间内，完成了Linux kernel相关的硕士课题，顺利毕业，开始了他的创业生涯。

而陈渝老师鼓励和引导后续的学生继续着操作系统教学和科研的快乐之旅。目前发现ucore中有不少的bug（不过少于Linux的bug），陈渝老师准备带着学生再研究一些算法、方法和工具，能够在ucore运行前通过静态分析的方法发现其潜在的bug，而且希望能够在ucore漰溃后，找到引起bug的内核代码在哪里，并能分析出为何这个内核代码会导致ucore漰溃的因果链。希望这样能够减轻大家学习OS实验的负担。


### 适合的对象 ###
本书适合对操作系统设计与实现感兴趣的技术爱好者，也适合与操作系统相关的在校学习的学生和任课的老师。书中涉及的技术并不艰涩,只要具备一定的编程技术和计算机原理基本只是,无论是C,JAVA,C++或其他编程语言,就可以学习本书了解和掌握如何一步一一步地通过动手实践来掌握操作系统.

## 本书结构 ##

  * 第一章：操作系统简介
  * 第二章：启动操作系统
  * 第三章：物理内存管理
  * 第四章：虚拟内存管理
  * 第五章：内核线程
  * 第六章：用户进程
  * 第七章：调度算法
  * 第八章：同步互斥
  * 第九章：文件系统

## 如何写作本书 ##
本书是用Markdown的文本文件写内容，通过pandoc，xelatex等工具生成所有的其他格式（如PDF等）；Git是本书采用的版本控制系统。

## 致谢 ##
特别感谢MIT的Frans Kaashoek教授，参与ucore实验的向勇老师，王乃铮以及对ucore OS做出贡献的各位同学：茅俊杰、陈宇恒、刘聪、杨扬、渠准、任胜伟、朱文雷、曹正、沈彤、陈旭、蓝昶、方宇剑、韩文涛、张凯程、郭晓林、薛天凡、胡刚、刘超、粟裕、袁昕颢...